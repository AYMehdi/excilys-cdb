package main.com.excilys.persistence;

import main.com.excilys.mapper.ComputerMapper;
import main .com.excilys.model.Computer;

import static main.com.excilys.persistence.DAOUtility.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class ComputerDAOImplementation implements ComputerDAO {
	
	private static final String SQL_SELECT_BY_ID = "SELECT id, name, introduced, discontinued, company_id FROM computer WHERE id = ?;";
	private static final String SQL_SELECT_ALL = "SELECT id, name, introduced, discontinued, company_id FROM computer;";
	private static final String SQL_INSERT = "INSERT INTO computer (name, introduced, discontinued, company_id) VALUES (?, ?, ?, ?)";
	private static final String SQL_UPDATE = "UPDATE computer SET name = ?, introduced = ?, discontinued = ?, company_id = ? WHERE id = ?;";
	private static final String SQL_DELETE = "DELETE FROM computer WHERE id = ?;";
	
	// ******* VARIABLES *******
	private DAOFactory daoFactory;
	private ComputerMapper computerMapper;
	
	// ******* CONSTRUCTEUR *******
	ComputerDAOImplementation(DAOFactory daoFactory) {
		this.setDAOFactory(daoFactory);
		this.setComputerMapper(new ComputerMapper());
	}
	
	// ******* GETTERS *******
	public DAOFactory getDAOFactory() {
		return daoFactory;
	}

	public ComputerMapper getComputerMapper() {
		return computerMapper;
	}
	
	// ******* SETTERS *******
	public void setDAOFactory(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}
	
	public void setComputerMapper(ComputerMapper computerMapper) {
		this.computerMapper = computerMapper;
	}
	
	// ******* INTERFACE IMPLEMENTATION *******
	@Override
	public ArrayList<Computer> computersList() throws DAOException {
	    ResultSet resultSet = null;
	    ArrayList<Computer> computers = new ArrayList<Computer>();
	    
	    try (
    		Connection connection = daoFactory.getConnection();
    		PreparedStatement preparedStatement = preparedStatementInitialization(connection, SQL_SELECT_ALL, false)) {
	    	
	        resultSet = preparedStatement.executeQuery();
	        
	        while (resultSet.next()) {
	        	computers.add(this.computerMapper.map(resultSet));
	        }
	        
	    } catch (SQLException e) {
			throw new DAOException(e);
	    }
	    
		return computers;
	}

	@Override
	public Computer find(int pID) throws DAOException {
	    ResultSet resultSet = null;
	    Computer computer = null;
	    
	    try (
    		Connection connection = daoFactory.getConnection();
    		PreparedStatement preparedStatement = preparedStatementInitialization(connection, SQL_SELECT_BY_ID, false, pID)) {
	    	
	        resultSet = preparedStatement.executeQuery();
	        
	        if (resultSet.next()) {
	        	computer = this.computerMapper.map(resultSet);
	        } else {
	        	throw new DAOException("No SQL request found for this computer ID.");
	        }
	        
	    } catch (SQLException e) {
			throw new DAOException(e);
		}
	    
		return computer;
	} 

	@Override
	public void add(Computer computer) throws DAOException {
	    ResultSet autoGeneratedValues = null;
	    
	    this.checkData(computer);

	    try (
	    	Connection connection = daoFactory.getConnection();
	    	PreparedStatement preparedStatement = preparedStatementInitialization(connection, SQL_INSERT, true, this.getCompanyId(computer), computer.getName(), computer.getIntroducedDate(), computer.getDiscontinuedDate())) {
	        
	        int statut = preparedStatement.executeUpdate();

	        if (statut == 0) {
	            throw new DAOException("Failed to add the computer in the database. No line created in the table of the database.");
	        }

	        autoGeneratedValues = preparedStatement.getGeneratedKeys();

	        if (autoGeneratedValues.next()) {
	        	computer.setId(autoGeneratedValues.getInt(1));
	        } else {
	            throw new DAOException("Failed to add the computer in the database. No auto-generated ID found.");
	        }
	        
	    } catch (SQLException e) {
	        throw new DAOException(e);
	    }
	}

	@Override
	public void update(Computer computer) throws DAOException {
	    this.checkData(computer);

	    try (
	    	Connection connection = daoFactory.getConnection();
	    	PreparedStatement preparedStatement = preparedStatementInitialization(connection, SQL_UPDATE, false, computer.getId(), computer.getName(), computer.getIntroducedDate(), computer.getDiscontinuedDate(), this.getCompanyId(computer))) {

	        int statut = preparedStatement.executeUpdate();

	        if (statut == 0) {
	            throw new DAOException("Failed to update the computer in the database. No line updated in the table of the database.");
	        }

	    } catch (SQLException e) {
	        throw new DAOException(e);
	    }
	}

	@Override
	public void remove(Computer computer) throws DAOException {
	    try (
    		Connection connection = daoFactory.getConnection();
    		PreparedStatement preparedStatement = preparedStatementInitialization(connection, SQL_DELETE, false, computer.getId())) {
	    	
	        int statut = preparedStatement.executeUpdate();

	        if (statut == 0) {
	            throw new DAOException("Failed to remove the computer in the database. No line deleted in the table.");
	        }

	    } catch (SQLException e) {
	        throw new DAOException(e);
	    }
	}
	
	public void checkData(Computer computer) {
		if(computer.getName() == null) {
	    	throw new DAOException("Failed to create this computer. Computer name does not exist.");
	    }
	    
	    if(computer.getIntroducedDate() == null && computer.getDiscontinuedDate() != null) {
	    	throw new DAOException("Failed to create this computer. Dicontinuation date is indicated but introduction one is not.");
	    }
	    
	    if((computer.getIntroducedDate() != null && computer.getDiscontinuedDate() != null) && computer.getDiscontinuedDate().before(computer.getIntroducedDate())) {
	    	throw new DAOException("Failed to add computer. Dicontinuation date is before the introduction one.");
	    }
	}
	
	public Integer getCompanyId(Computer computer) {
		Integer companyID = null;
		
    	if(computer.getCompany() != null) {
    		companyID = computer.getCompany().getId();
    	}
    	
    	return companyID;
	}
}
